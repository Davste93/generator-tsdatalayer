
// Generated by typings
// Source: node_modules/tsmvc/lib/classes/helper/ApiParser.d.ts
declare module '~tsmvc/lib/classes/helper/ApiParser' {
import { List } from '~tsmvc/lib/classes/helper/List';
export class ApiParser {
    static Parse<T>(objType: {
        new (): T;
    }, json: any): T;
    static ParseList<T>(objType: {
        new (): T;
    }, json: any): List<T>;
    static ParseUnsafe<T>(jsonString: string): T;
    static ParseListUnsafe<T>(jsonString: string): List<T>;
}
}
declare module 'tsmvc/lib/classes/helper/ApiParser' {
export * from '~tsmvc/lib/classes/helper/ApiParser';
}

// Generated by typings
// Source: node_modules/tsmvc/lib/classes/helper/ApiRepository.d.ts
declare module '~tsmvc/lib/classes/helper/ApiRepository' {
import { Model } from '~tsmvc/lib/interfaces/model/Model';
import { List } from '~tsmvc/lib/classes/helper/List';
import { DataRepository } from '~tsmvc/lib/interfaces/data/DataRepository';
import {Promise} from "es6-promise";
export abstract class ApiRepository<T extends Model> implements DataRepository<T> {
    abstract getModelType(): {
        new (): any;
    };
    abstract getUrl(): string;
    exists(modelID: string): Promise<boolean>;
    getRange(modelIDList: List<string>): Promise<List<T>>;
    count(): number;
    buildReqOptions(requestType: string, url: string, model: any): any;
    buildRequestAndParseAsT<T extends Model>(url: string, requestType: string, model: T): Promise<T>;
    buildRequestAndParseAsTList<T extends Model>(url: string, requestType: string, model: T): Promise<List<T>>;
    /** Makes a request. If model is not null, it will pass it to the request
    as JSON. It will parse the response using the parser function provided,
    encapsulated in a promise. Uses default item parser. */
    buildRequestAndParseAsModel(url: string, requestType: string, model: any): Promise<T>;
    buildRequestAndParseAsModelList(url: string, requestType: string, model: any): Promise<List<T>>;
    getItem(modelID: string): Promise<T>;
    getAllItems(): Promise<List<T>>;
    addItem(modelItem: T): Promise<T>;
    removeItem(emptyModelWithID: T): Promise<T>;
    saveItem(modelItem: T): Promise<T>;
}
}
declare module 'tsmvc/lib/classes/helper/ApiRepository' {
export * from '~tsmvc/lib/classes/helper/ApiRepository';
}

// Generated by typings
// Source: node_modules/tsmvc/lib/classes/helper/List.d.ts
declare module '~tsmvc/lib/classes/helper/List' {
export class List<T> {
    private items;
    constructor();
    size(): number;
    add(value: T): void;
    get(index: number): T;
    first(): T;
    last(): T;
    getArray(): Array<T>;
}
}
declare module 'tsmvc/lib/classes/helper/List' {
export * from '~tsmvc/lib/classes/helper/List';
}

// Generated by typings
// Source: node_modules/tsmvc/lib/interfaces/data/DataRepository.d.ts
declare module '~tsmvc/lib/interfaces/data/DataRepository' {
import { Model } from '~tsmvc/lib/interfaces/model/Model';
import { List } from '~tsmvc/lib/classes/helper/List';
import {Promise} from "es6-promise";
export interface DataRepository<T extends Model> {
    getModelType(): {
        new (): any;
    };
    getItem(modelID: string): Promise<T>;
    exists(modelID: string): Promise<boolean>;
    getAllItems(): Promise<List<T>>;
    getRange(modelIDList: List<string>): Promise<List<T>>;
    count(): number;
    addItem(modelItem: T): Promise<T>;
    removeItem(emptyModelWithID: T): Promise<T>;
    saveItem(modelItem: T): Promise<T>;
}
}
declare module 'tsmvc/lib/interfaces/data/DataRepository' {
export * from '~tsmvc/lib/interfaces/data/DataRepository';
}

// Generated by typings
// Source: node_modules/tsmvc/lib/interfaces/model/Serializable.d.ts
declare module '~tsmvc/lib/interfaces/model/Serializable' {
export abstract class Serializable {
    readInto(obj: any): void;
    stringify(): string;
}
}
declare module 'tsmvc/lib/interfaces/model/Serializable' {
export * from '~tsmvc/lib/interfaces/model/Serializable';
}

// Generated by typings
// Source: node_modules/tsmvc/lib/interfaces/model/Model.d.ts
declare module '~tsmvc/lib/interfaces/model/Model' {
import { Serializable } from '~tsmvc/lib/interfaces/model/Serializable';
export abstract class Model extends Serializable {
    getIndex(): string;
}
export function indexKey(target: any, name: any): void;
}
declare module 'tsmvc/lib/interfaces/model/Model' {
export * from '~tsmvc/lib/interfaces/model/Model';
}

// Generated by typings
// Source: node_modules/tsmvc/lib/interfaces/service/Service.d.ts
declare module '~tsmvc/lib/interfaces/service/Service' {
export interface Service {
}
}
declare module 'tsmvc/lib/interfaces/service/Service' {
export * from '~tsmvc/lib/interfaces/service/Service';
}

// Generated by typings
// Source: node_modules/tsmvc/lib/index.d.ts
declare module '~tsmvc/lib/index' {
export * from '~tsmvc/lib/classes/helper/ApiParser';
export * from '~tsmvc/lib/classes/helper/ApiRepository';
export * from '~tsmvc/lib/classes/helper/List';
export * from '~tsmvc/lib/interfaces/data/DataRepository';
export * from '~tsmvc/lib/interfaces/model/Model';
export * from '~tsmvc/lib/interfaces/service/Service';
}
declare module 'tsmvc/lib/index' {
export * from '~tsmvc/lib/index';
}
declare module 'tsmvc' {
export * from '~tsmvc/lib/index';
}
